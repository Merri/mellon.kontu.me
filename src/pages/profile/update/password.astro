---
import { marked } from 'marked';

import BaseHead from "$/components/BaseHead.astro";
import PageFooter from "$/components/PageFooter.astro";
import PageHeader from "$/components/PageHeader.astro";
import { getMemberIdFromCookie } from "$/lib/auth";
import { getLogger } from "$/lib/bugsnag";
import { sql } from "$/lib/db";
import { getMemberEmailField, sendMail } from '$/lib/email';
import { passwordHashAndSalt } from "$/lib/passwordHashAndSalt";
import type { Member } from "$/types/db";
import Icon from '$/components/Icon.astro';

const memberId = getMemberIdFromCookie(Astro.request.headers.get('cookie'))
const member = memberId != null ? (await sql<Member[]>`SELECT * FROM members WHERE id = ${memberId}`).pop() : undefined

if (!member || !member.hash) {
	return Astro.redirect('/profile')
}

const isSubmit = Astro.request.method.toUpperCase() === 'POST'

const formData = isSubmit ? await Astro.request.formData() : null
const _password = formData?.get('password')
const _newPassword = formData?.get('newPassword')
const _confirmPassword = formData?.get('confirmPassword')

const password = typeof _password === 'string' ? _password : ''
const newPassword = typeof _newPassword === 'string' ? _newPassword : ''
const confirmPassword = typeof _confirmPassword === 'string' ? _confirmPassword : ''

const hash = member.hash

const text = `
## Tervehdys Mellonista!

Tämä on vahvistusviesti siitä, että olet vaihtanut salasanasi. Mikäli et ollut itse asialla, niin käy heti kirjautumassa
ja vaihda salasanasi: ${new URL('/profile', Astro.request.url)}

Kaapattiinko tunnuksesi? Vastaa tähän viestiin.
`

type Errors = ('password' | 'newPassword')[]
type DialogString = 'success' | 'database-failure' | 'password-failure'

const response: DialogString | Errors = await new Promise((resolve) => {
	if (!isSubmit) return resolve([])

	const errors: Errors = []

	if (!password) errors.push('password')
	if (!newPassword || newPassword !== confirmPassword) errors.push('newPassword')

	if (errors.length) return resolve(errors)

	try {
		passwordHashAndSalt(password).verifyAgainst(hash, function (error, verified) {
			if (error) {
				getLogger().notify(error)
				return resolve('password-failure')
			}

			if (!verified) {
				errors.push('password')
				return resolve(errors)
			}

			passwordHashAndSalt(newPassword).hash(async function (error, newHash) {
				if (error || !newHash) {
					getLogger().notify(error || new Error(`Password hash failed: ${newHash}`))
					return resolve('password-failure')
				}

				const updatedMember = (await sql<Member[]>`
					UPDATE members
					SET hash = ${newHash}
					WHERE hash = ${hash} AND id = ${memberId}
					RETURNING *
				`).pop()

				if (updatedMember) {
					sendMail({
						to: getMemberEmailField(member),
						subject: 'Salasana vaihdettu',
						text,
						html: marked.parse(text)
					})
					return resolve('success')
				} else {
					return resolve('database-failure')
				}
			})
		})
	} catch (error) {
		if (error instanceof Error) getLogger().notify(error)
		return resolve('password-failure')
	}
})

const dialog = typeof response === 'string' ? response : ''
const errors = new Set(Array.isArray(response) ? response : [])

Astro.response.headers.set('Cache-Control', 'no-cache')
Astro.response.headers.set('X-Robots-Tag', 'noindex')

const breadcrumbs = [
	{ href: '/', title: 'Etusivu' },
	{ href: `/profile`, title: 'Omat tiedot' },
	{ title: 'Salasanan päivittäminen' }
]

---

<html lang="fi">

<BaseHead title="Salasanan päivittäminen" description="Salasana vaihdetaan tällä sivulla" />

<body>
	<PageHeader breadcrumbs={breadcrumbs} />

	<main id="main">
		{dialog === 'password-failure' && <div>Salasanan varmistamisessa tapahtui virhe.</div>}
		{dialog === 'database-failure' && <div>Salasanan tallentamisessa tapahtui virhe. Salasana ei mahdollisesti
			vaihtunut.</div>}
		{(errors.has('password') && errors.size === 1 && <div>Tarkista vanha salasana.</div>) || (errors.size > 0 &&
		<div>
			Uudet salasanat eivät täsmää.</div>)}
		<h1>Salasanan päivittäminen</h1>
		{dialog !== 'success' ? <form action="/profile/update/password" method="POST">
			<p class="form-field">
				<label>Nykyinen salasana: <input id="password" type="password" name="password" required
						autocomplete="current-password" value={password} class={errors.has('password') ? 'error' :
						undefined} aria-invalid={errors.has('password')} /></label>
			</p>
			<p class="form-field">
				<label>Uusi salasana: <input id="newPassword" type="password" name="newPassword" required
						autocomplete="new-password" minlength={8} value={newPassword} class={errors.has('newPassword')
						? 'error' : undefined} aria-invalid={errors.has('newPassword')} /></label>
				<small>
					Vinkki: hyvä salasana on pitkä helposti muistettava lause.<br />
					Esimerkki: örkiltä putosi pöksyt ja nyt minun pitää silittää ne
				</small>
			</p>
			<p class="form-field">
				<label>Vahvista salasana: <input id="confirmPassword" type="password" name="confirmPassword" required
						autocomplete="new-password" minlength={8} value={confirmPassword}
						class={errors.has('newPassword') ? 'error' : undefined}
						aria-invalid={errors.has('newPassword')} /></label>
				<small>Kirjoita uusi salasana uudelleen.</small>
			</p>
			<p>
				<button type="submit">
					<Icon href="/icons/save.svg" />
					Päivitä salasana
				</button>
			</p>
		</form> : <>
			<p>Salasanan päivittäminen onnistui!</p>
			<p>
				<a class="button" href="/profile">
					<Icon href="/icons/arrow-left.svg" />
					Takaisin omiin tietoihin
				</a>
			</p>
		</>}
	</main>

	<PageFooter />
</body>

</html>
