---
import BaseHead from "$/components/BaseHead.astro";
import Fellowship from "$/components/Fellowship.astro";
import Icon from "$/components/Icon.astro";
import PageFooter from '$/components/PageFooter.astro';
import PageHeader from "$/components/PageHeader.astro";
import { getYmdUTC, meetupToZonedTime, toZonedTime } from '$/lib/date';
import { sql } from "$/lib/db";
import { getTextMeetupDateRange, getTextRegistrationClose, getTextRegistrationOpen } from '$/lib/meetup';
import type { Meetup, Organization, Place } from "$/types/db";

const now = new Date()
const nowFinnish = toZonedTime(new Date())

const upcomingMeetups = (await sql<Meetup[]>`
	SELECT * FROM meetups
	WHERE "end" >= ${getYmdUTC(now)}
	ORDER BY "open" ASC NULLS LAST, "end" ASC NULLS LAST, "begin" ASC NULLS LAST
`).map(meetupToZonedTime)

const placeIds = new Set(upcomingMeetups.map(({ placeId }) => placeId))

const places = placeIds.size ? await sql<Place[]>`SELECT * FROM places WHERE id IN ${sql([...placeIds])}` : []
const placeMap = new Map<number, Place>()
places.forEach(place => {
	placeMap.set(place.id, place)
})

const organizationIds = new Set(upcomingMeetups.map(({ organizationId }) => organizationId).filter(x => x))

const organizations = organizationIds.size ? await sql<Organization[]>`SELECT * FROM organizations WHERE id IN ${sql([...organizationIds])}` : []
const organizationMap = new Map<number, Organization>()
organizations.forEach(organization => {
	organizationMap.set(organization.id, organization)
})

---

<html lang="fi">

<BaseHead title="Mellon — Tule, ystävä, ja ilmoittaudu miittiin!"
	description="Konnun miitteihin ilmoittautumispaikka." />

<body>
	<PageHeader />

	<main id="main">
		<h1>Tervetuloa, ystävä!</h1>
		<p>Mellonissa voi ilmoittautua miitteihin.</p>
		<h2>Tulevat miitit</h2>
		{upcomingMeetups.length > 0 ? <dl>
			{upcomingMeetups.map(meetup => {
			const willOpen = getTextRegistrationOpen({ format: `EEEEEE d.M.Y 'klo' H:mm`, now: nowFinnish, meetup })
			const willClose = getTextRegistrationClose({ format: `EEEEEE d.M.Y 'klo' H:mm`, now: nowFinnish, meetup })
			const isOpen = willOpen == null && willClose != null

			return <div>
				<dt>
					{meetup.organizer === 'organization' && meetup.organizationId != null &&
					<small>{organizationMap.get(meetup.organizationId)?.name}</small>}
					{meetup.organizer === 'member' && meetup.memberId != null && <small>Yksityishenkilön
						järjestämä</small>}
					{meetup.organizer === 'none' && <small>Epävirallinen oheistapahtuma (ei järjestäjää)</small>}
					<br />
					<a href={`/meetups/view/${meetup.id}`}><strong>{meetup.title}</strong></a>
				</dt>
				<dd>
					<span>{placeMap.get(meetup.placeId)?.name}</span><br />
					{getTextMeetupDateRange(meetup)}<br />
					{isOpen && <p>
						<a href={`/meetups/registration/${meetup.id}`} class="button">
							Ilmoittaudu!
							<Icon href="/icons/calendar.svg" />
						</a>
					</p>}
					<p>
						{(willOpen && <small>Ilmoittautuminen alkaa {willOpen}</small>) || (willClose &&
						<small>Ilmoittautuminen sulkeutuu {willClose}</small>) || <small>Ilmoittautuminen
							sulkeutunut</small>}
					</p>
				</dd>
			</div>
			})}
		</dl> :
		<p>Tällä hetkellä ei ole tulevia miittejä.</p>}
	</main>
	<style>
		dl {
			display: flex;
			flex-wrap: wrap;
			gap: 1rem;
			justify-content: space-evenly;
			margin: 1rem;
			text-align: center;
		}

		dl>div {
			border: thin solid var(--border-color);
			border-radius: 1rem;
			max-width: 24rem;
			padding: 0.5rem 1rem 0;
		}

		dl>div:only-child {
			margin-right: auto;
		}

		dt {
			border-bottom: thin solid var(--border-color);
			font-size: 1.25rem;
			margin: 0 -1rem;
			padding: 0 1rem 1rem;
		}

		dt>small {
			font-size: 0.875rem;
			font-weight: bold;
		}

		dd {
			margin: 0;
			padding: 1rem 0 0;
		}
	</style>

	<Fellowship />

	<PageFooter />
</body>

</html>
