---
import { isBefore } from "date-fns";

import BaseHead from "$/components/BaseHead.astro";
import { FamilyMembers } from "$/components/FamilyMembers";
import Icon from "$/components/Icon.astro";
import PageHeader from "$/components/PageHeader.astro";
import PageFooter from "$/components/PageFooter.astro";
import { getMemberIdFromCookie } from "$/lib/auth";
import { meetupToZonedTime } from "$/lib/date";
import { sql } from "$/lib/db";
import { getRegistrationCloseDate } from "$/lib/meetup";
import ErrorPage from "$/pages/404.astro";
import type { Meetup, Member, Place, Registration } from "$/types/db";
import type { FamilyMember } from "$/types/registrations";

const now = new Date()
const meetupId = Math.round(Number(Astro.params.meetupId))

const memberId = getMemberIdFromCookie(Astro.request.headers.get('cookie'))
const member = memberId != null ? (await sql<Member[]>`SELECT * FROM members WHERE id = ${memberId}`).pop() : undefined
const meetup = (meetupId > 0 || undefined) && (await sql<Meetup[]>`
	SELECT *
	FROM meetups
	WHERE id = ${meetupId}
`).map(meetupToZonedTime).pop()
const registrations: Registration[] = meetup && member ? (await sql<Registration[]>`
	SELECT *
	FROM registrations
	WHERE "meetupId" = ${meetup.id} AND "memberId" = ${member.id}
`) : []
const place = meetup && (await sql<Place[]>`SELECT * FROM places WHERE id = ${meetup.placeId}`).pop()

const isSubmit = Astro.request.method.toUpperCase() === 'POST'
const isUpdate = registrations.length > 0

const hasAllergies = member && meetup ? meetup.enableAllergyFields : false
const hasFamilyMembers = member && meetup ? meetup.enableFamilyMembers : false
const hasOvernight = meetup ? meetup.enableCampingMembers || meetup.enableDailyVisitors : false
const hasSauna = place && meetup ? place.hasSauna && meetup.enableSaunaOption : false

const formData = isSubmit ? await Astro.request.formData() : null
const _email = !member && formData?.get('email') || undefined

const persons: FamilyMember[] = []

if (formData) for (let [key, value] of formData.entries()) {
	if (typeof value !== 'string') continue

	const item = /^person\[(\d)\]\[(.*)\]$/.exec(key)
	if (item && persons.length < 6) {
		const [_, index, field] = item
		const i = Number(index)
		if (persons[i] == null) persons[Number(index)] = {}
		if (field === 'age' || field === 'id') {
			if (value) persons[i][field] = parseInt(value, 10) || 0
		} else {
			// @ts-ignore
			persons[i][field] = value
		}
	}
}

const validIds = new Set(registrations.map(({ id }) => id))

persons.forEach(person => {
	if (person.id != null) {
		if (validIds.has(person.id)) {
			validIds.delete(person.id)
		} else {
			delete person.id
		}
	}
	if (!hasAllergies) delete person.allergies
	if (!member) delete person.info
	if (!hasOvernight) delete person.overnight
	if (!hasSauna) delete person.sauna
})

console.log('persons', persons, 'formData.entries', Array.from(formData?.entries() ?? []))

const person = persons.shift() || {}

// Participant themselves
const email = typeof _email === 'string' ? _email : ''
const diet = person.diet || ''
const allergies = person.allergies || ''
const sauna = person.sauna || ''
const info = person.info || ''
const overnight = person.overnight || ''

// Participant's family members
const familyMembers: FamilyMember[] = hasFamilyMembers ? persons : []

const closeDate = getRegistrationCloseDate(meetup)
const isRegistrationOpen = meetup?.open != null && closeDate != null && isBefore(meetup.open, now) && isBefore(now, closeDate)

---

{meetup && place ? <html lang="fi">

<BaseHead title={`Ilmoittautuminen tapahtumaan ${meetup.title}`}
	description="Tällä sivulla voit ilmoittautua tapahtumaan" />

<body>
	<PageHeader />

	{isRegistrationOpen ?
	<main id="main">
		<p>
			<a class="button" href={`/meetups/view/${meetupId}`}>
				<Icon href="/icons/arrow-left.svg" />
				Tapahtuman esittely
			</a>
		</p>
		<h1>{meetup.title}</h1>
		<p>
			{!isUpdate ? <span>Olet ilmoittautumassa tähän tapahtumaan.</span> : <span>Olet ilmoittautunut tähän
				tapahtumaan.</span>}
			{meetup.ageLimit > 0 && <span>Tapahtuman ikäraja on ${meetup.ageLimit} vuotta.</span>}
			{meetup.isFree ? <span>Tapahtuma on maksuton.</span> : <span>Osallistuminen maksaa, hintatiedot saa
				järjestäjältä.</span>}
		</p>
		<form action="" method="POST">
			<h2>
				<Icon href="/icons/user-1.svg" size={2.1875} /> Omat tiedot
			</h2>
			{!member && <p class="form-field">
				<label>
					Sähköpostiosoitteesi:
					<input aria-describedby="description-email" type="email" name="email" autocomplete="email"
						value={email} required />
				</label>
				<small id="description-email">Saat viestin jolla vahvistaa ilmoittautumisesi.</small><br />
				Tai vaihtoehtoisesti voit myös <a href="/profile">kirjautua Melloniin</a> ja ilmoittautua vasta sitten.
			</p>}
			<input type="hidden" name="person[0][id]" value={person.id || '' } />
			<input type="hidden" name="person[0][publicname]" value="" />
			<input type="hidden" name="person[0][name]" value="" />
			<input type="hidden" name="person[0][age]" value="" />
			{place.hasSauna && <>
				{meetup.enableSaunaOption ? <p class="form-field">
					<label for="sauna">
						Saunavuorot:
						<select id="sauna" name="person[0][sauna]">
							<option value="any" selected={sauna==='any' }>Sekavuoro</option>
							<option value="male" selected={sauna==='male' }>Miestenvuoro</option>
							<option value="female" selected={sauna==='female' }>Naistenvuoro</option>
							<option value="family" selected={sauna==='family' }>Oma vuoro / perhevuoro</option>
							<option value="none" selected={sauna==='none' }>En sauno</option>
						</select>
					</label>
					<small>Toive järjestettävistä saunavuoroista.</small>
				</p> : <p>Tapahtumapaikalla on sauna. Kysy mahdollisista saunavuoroista tapahtuman järjestäjältä.</p>}
			</>}
			{hasOvernight ? <p class="form-field">
				<label for="overnight">
					Yöpyminen:
					<select id="overnight" name="person[0][overnight]">
						<option value="bed" selected={overnight==='bed' }>Nukun sängyssä</option>
						{meetup.enableCampingMembers && <option value="camping" selected={overnight==='camping' }>Nukun
							omassa teltassa</option>}
						{meetup.enableDailyVisitors && <option value="dailyVisitor" selected={overnight==='dailyVisitor'
							}>Käyn ainoastaan päivävierailulla
						</option>}
					</select>
				</label>
				<small>Tapahtumassa on käytettävissä {meetup.beds || place.beds} sänkypaikkaa.</small>
				{meetup.enableCampingMembers && <span><br />Telttailemalla mahdollistat joko enemmän osallistujia tai
					vaihtoehtoisesti enemmän tilaa muille osallistujille.</span>}
				{meetup.enableDailyVisitors && <span><br />Päivävierailijalla ei ole sänkypaikkaa eikä oikeutta yöpyä
					tapahtumapaikalla. {!meetup.isFree && 'Varmista päivävierailun hinta järjestäjältä.'}</span>}
			</p> : <p>Tapahtumassa on käytettävissä {meetup.beds || place.beds} sänkypaikkaa.</p>}
			<p class="form-field">
				<label for="diet">
					Ruokavalio:
					<select id="diet" name="person[0][diet]" autocomplete="off">
						<option value="all" selected={diet==='all' }>Kaikki käy</option>
						<option value="semivegetarian" selected={diet==='semivegetarian' }>Semivegetaarinen</option>
						<option value="lacto-ovarian" selected={diet==='lacto-ovarian' }>Lakto-ovovegetaarinen</option>
						<option value="lactovegetarian" selected={diet==='lactovegetarian' }>Laktovegetaarinen</option>
						<option value="pescovegetarian" selected={diet==='pescovegetarian' }>Pescovegetaarinen</option>
						<option value="vegan" selected={diet==='vegan' }>Vegaani</option>
						<option value="none" selected={diet==='none' }>En osallistu yhteisruokailuihin</option>
					</select>
				</label>
				<small>Tämä vaikuttaa tapahtuman järjestäjän hankkimiin ruokiin ja määriin.</small>
			</p>
			{meetup.enableAllergyFields && <>
				{member ?
				<p class="form-field">
					<label>
						Allergiat:
						<textarea name="person[0][allergies]" autocomplete="off" cols={40}>{allergies}</textarea>
					</label>
					<small>Tämä auttaa järjestäjää ohjeistamaan muita osallistujia jättämään tuomatta vakavia
						allergioiden aiheuttajia, sekä vaikuttaa yhteisruokailujen ruoka-aineisiin.</small>
				</p> : <p>Kirjaudu sisään jos sinun tarvitsee ilmoittaa (vakavista) allergioista.</p>}
			</>}
			{member ?
			<p class="form-field">
				<label>
					Lisätietoja:
					<textarea name="person[0][info]" cols={40}>{info}</textarea>
				</label>
				<small>Voit kirjoittaa tähän lyhyesti tarkennuksia aiempiin kohtiin. Älä jätä tähän kenttään kysymyksiä
					vaan kysy ne suoraan järjestäjältä.</small>
			</p> : <p>Kirjaudu sisään jos sinun tarvitsee ilmoittaa tarkempia tietoja.</p>}
			{meetup.enableFamilyMembers && <>
				{member ? <div>
					<FamilyMembers client:load familyMembers={familyMembers} sauna={place.hasSauna &&
						meetup.enableSaunaOption} overnightOptions={`bed${meetup.enableCampingMembers ? '|camping' : ''
						}${meetup.enableDailyVisitors ? '|dailyVisitor' : '' }`} allergy={meetup.enableAllergyFields} />
					<style is:global>
						.family-members {
							background: #f5f5f5;
							border: thin solid var(--border-color);
							border-radius: 1rem;
							padding: 0 1.5rem;
						}

						.family-member {
							border-top: 3px double var(--border-color);
						}

						.family-member-addition {
							border-top: 3px double var(--border-color);
							display: flex;
							justify-content: flex-end;
							padding-top: 1rem;
						}

						.family-member-addition button {
							min-width: 0;
						}
					</style>
				</div> : <p>Haluatko samalla ilmoittaa perheenjäseniä? Kirjaudu ensin sisälle!</p>}
			</>}
			<p>
				<button type="submit">
					<Icon href={isUpdate ? '/icons/check.svg' : '/icons/send-2.svg' } />
					{isUpdate ? 'Tallenna ilmoittautuminen' : 'Lähetä ilmoittautuminen'}
				</button>
			</p>
		</form>
	</main> : <main id="main">
		<h1>{meetup.title}</h1>
		<p><strong>Ilmoittautuminen ei ole auki!</strong></p>
		<p>Tähän miittiin ei voi tällä hetkellä ilmoittautua.</p>
		<p>
			<a class="button" href={`/meetups/view/${meetupId}`}>
				<Icon href="/icons/users.svg" />
				Tapahtuman esittely
			</a>
		</p>
	</main>}

	<PageFooter />
</body>

</html> :
<ErrorPage />}
