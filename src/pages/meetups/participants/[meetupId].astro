---
import { differenceInDays, endOfDay, startOfDay } from "date-fns"
import JWT from 'jsonwebtoken'

import BaseHead from "$/components/BaseHead.astro"
import Icon from "$/components/Icon.astro"
import OrganizerMenu from "$/components/OrganizerMenu.astro"
import { ParticipantRow } from '$/components/ParticipantRow'
import PageFooter from "$/components/PageFooter.astro"
import PageHeader from "$/components/PageHeader.astro"
import { getMemberIdFromCookie } from "$/lib/auth"
import { getLogger } from "$/lib/bugsnag"
import { meetupToZonedTime, toZonedTime } from "$/lib/date"
import { sql } from "$/lib/db"
import { getOvernightOptions } from '$/lib/meetup'
import { getRegInfo, getRegLevel } from '$/lib/registration'
import type { RegLevelType, RegInfo } from '$/lib/registration'
import NotAuthenticated from '$/pages/401.astro'
import NotAuthorized from '$/pages/403.astro'
import type { Meetup, Member, Registration } from "$/types/db"
import Notification from "$/components/atoms/Notification.astro"

const now = new Date()
const nowFinnish = toZonedTime(new Date())
const meetupId = Math.round(Number(Astro.params.meetupId))

const memberId = getMemberIdFromCookie(Astro.request.headers.get('cookie'))
const member = memberId != null ? (await sql<Member[]>`SELECT * FROM members WHERE id = ${memberId}`).pop() : undefined
const meetup = (meetupId > 0 || undefined) && (await sql<Meetup[]>`
	SELECT *
	FROM meetups
	WHERE id = ${meetupId}
`).map(meetupToZonedTime).pop()

async function fetchRegistrations(meetupId: number) {
	return sql<Registration[]>`
		SELECT *
		FROM registrations
		WHERE "meetupId" = ${meetupId}
		ORDER BY "isOrganizer" DESC,
			"cancelled" ASC NULLS FIRST,
			"confirmed" ASC NULLS LAST,
			"registered" ASC NULLS LAST,
			"id" ASC
	`
}

const registrations: Registration[] = meetup && member ? await fetchRegistrations(meetup.id) : []

const hasData = meetup != null && member != null
const isOwner = hasData && meetup.memberId === member.id
const isOrganizer = hasData && registrations.some(reg => reg.isOrganizer && reg.memberId === member.id)
const hasAccess = isOwner || isOrganizer

const isPost = Astro.request.method.toUpperCase() === 'POST'

type ErrorType = 'database-error'
type SuccessType = 'update-success' | 'nothing-to-update'

const errors = new Set<ErrorType>()
const success = new Set<SuccessType>()

if (hasAccess && isPost) {
	const regMap = registrations.reduce<Map<number, Registration>>((map, reg) => {
		map.set(reg.id, reg)
		return map
	}, new Map())

	const regInfoMap = registrations.reduce<Map<number, RegInfo>>((map, reg) => {
		map.set(reg.id, getRegInfo(reg))
		return map
	}, new Map())

	const formData = await Astro.request.formData()

	const levels = new Map<Registration, RegLevelType>()
	const overnights = new Map<number, 'bed' | 'camping' | 'dailyVisitor'>()
	const saunas = new Map<number, 'none' | 'any' | 'male' | 'female' | 'family'>()
	const markedPaid = new Set<number>()

	for (let [key, value] of formData.entries()) {
		if (typeof value !== 'string') continue

		const level = /^(level|overnight|sauna|paid)\[(\d+)\]$/.exec(key)
		if (!level) continue
		const [_, type, regId] = level
		const oldReg = regMap.get(Number(regId))
		if (!oldReg) continue

		if (type === 'level') {
			if (value === 'organizer' || value === 'cancelled' || value === 'confirmed' || value === 'registered') {
				const oldLevel = getRegLevel(oldReg)
				if (oldLevel !== value) levels.set(oldReg, value)
			}
		} else if (type === 'overnight') {
			if (value === 'bed' || value === 'camping' || value === 'dailyVisitor') {
				const oldOvernight = regInfoMap.get(oldReg.id)?.overnight
				if (oldOvernight !== value) overnights.set(oldReg.id, value)
			}
		} else if (type === 'sauna') {
			if (value === 'none' || value === 'any' || value === 'male' || value === 'female' || value === 'family') {
				const oldSauna = regInfoMap.get(oldReg.id)?.sauna
				if (oldSauna !== value) saunas.set(oldReg.id, value)
			}
		} else if (type === 'paid') {
			if (value === 'yes') markedPaid.add(oldReg.id)
		}
	}

	const removePaid = meetup.isFree ? [] : registrations.filter(reg => reg.paid != null && !markedPaid.has(reg.id)).map(({ id }) => id)
	const addPaid = meetup.isFree ? [] : registrations.filter(reg => reg.paid == null && markedPaid.has(reg.id)).map(({ id }) => id)

	if (levels.size === 0 && overnights.size === 0 && saunas.size === 0 && removePaid.length === 0 && addPaid.length === 0) {
		success.add('nothing-to-update')
	} else {
		try {
			if (levels.size > 0) {
				await sql.begin(sql => Array.from(levels.entries()).map(
					([{ id, registered, confirmed, cancelled }, regLevel]) => {
						const fields: Pick<Registration, 'registered' | 'confirmed' | 'cancelled' | 'isOrganizer'> = {
							registered,
							confirmed,
							cancelled,
							isOrganizer: regLevel === 'organizer'
						}

						if (regLevel === 'organizer' || regLevel === 'confirmed') {
							if (!registered) fields.registered = now
							if (!confirmed) fields.confirmed = now
							if (cancelled) fields.cancelled = null
						} else if (regLevel === 'registered') {
							if (!registered) fields.registered = now
							if (confirmed) fields.confirmed = null
							if (cancelled) fields.cancelled = null
						} else if (regLevel === 'cancelled') {
							if (!cancelled) fields.cancelled = now
						}

						return sql<Registration[]>`
							UPDATE registrations
							SET ${sql(fields)}
							WHERE "id" = ${id}
						`
					})
				)
			}

			if (addPaid.length) {
				await sql`
					UPDATE registrations
					SET "paid" = ${now}
					WHERE "id" IN ${sql(addPaid)}
				`
			}

			if (removePaid.length) {
				await sql`
					UPDATE registrations
					SET "paid" = null
					WHERE "id" IN ${sql(removePaid)}
				`
			}

			const updateInfoRegs = Array.from(new Set([...overnights.keys(), ...saunas.keys()]))
				.reduce<Map<number, RegInfo>>((map, regId) => {
					map.set(regId, { ...regInfoMap.get(regId) })
					return map
				}, new Map())

			for (let [id, value] of overnights.entries()) {
				const infoReg = updateInfoRegs.get(id)
				if (infoReg) infoReg.overnight = value
			}

			for (let [id, value] of saunas.entries()) {
				const infoReg = updateInfoRegs.get(id)
				if (infoReg) infoReg.sauna = value
			}

			if (updateInfoRegs.size) {
				await sql.begin(sql => Array.from(updateInfoRegs.entries()).map(
					([regId, regInfo]) => {
						const info = JWT.sign(regInfo, import.meta.env.JWT_DATABASE, { algorithm: 'HS256' })

						return sql`
							UPDATE registrations
							SET "info" = ${info}
							WHERE "id" = ${regId}
						`
					}
				))
			}

			registrations.length = 0
			registrations.push(...(await fetchRegistrations(meetup.id)))

			success.add('update-success')
		} catch (error) {
			if (typeof error === 'string') {
				errors.add(error as ErrorType)
			} else if (error instanceof Error) {
				getLogger().notify(error)
				errors.add('database-error')
			}
		}
	}
}

const regMemberIds = hasAccess ? Array.from(new Set(registrations.map(({ memberId }) => memberId))) : []
const members = regMemberIds.length ? await sql<Member[]>`SELECT * FROM members WHERE id IN ${sql(regMemberIds)}` : []

members.sort(
	(a, b) =>
		registrations.findIndex(reg => reg.memberId === a.id) - registrations.findIndex(reg => reg.memberId === b.id)
)

const memberRows = members.map(member => ({
	memberId: member.id,
	publicname: member.publicname,
	fullname: member.fullname,
	email: member.email,
	phone: member.phone,
	regs: registrations.filter(reg => reg.memberId === member.id).sort((a, b) => a.id - b.id)
}))

const overnightOptions = getOvernightOptions(meetup)
const numDays = meetup && meetup.begin != null && meetup.end != null ? differenceInDays(endOfDay(meetup.end), startOfDay(meetup.begin)) + 1 : 1

const breadcrumbs = meetup ? [
	{ href: '/', title: 'Etusivu' },
	{ href: `/meetups`, title: 'Miitit' },
	{ href: `/meetups/view/${meetup.id}`, title: meetup.title },
	{ title: 'Osallistujat' }
] : []

if (hasAccess && !isPost) {
	Astro.response.headers.set('Cache-Control', 'private, max-age=0')
}

const notifications: string[] = [
	success.has('update-success') && 'Muutokset tallennettu!',
	success.has('nothing-to-update') && 'Ei havaittu muutoksia, joten mitään ei tallennettu.',
	errors.has('database-error') && 'Odottamaton virhe: tietokannan päivittäminen ei onnistunut! Osa tiedoista saattoi muuttua.',
].filter((x): x is string => typeof x === 'string')

---

{(hasAccess && <html lang="fi">

<BaseHead title={`Osallistujat ${meetup.title}`} description="Miitin osallistujien hallinnointi" />

<body>
	<PageHeader breadcrumbs={breadcrumbs}>
		<OrganizerMenu meetupId={meetup.id} />
	</PageHeader>

	<main id="main">
		<Notification messages={notifications} title={errors.size ? 'Tapahtui virhe' : undefined} />

		<h1>
			<Icon href="/icons/users-more.svg" size={3.5} /> Osallistujat
		</h1>

		<form action="" method="POST">
			<div class="horizontally-scrollable">
				<table>
					<thead>
						<tr>
							<th style="text-align:right" title="Osallistumisjärjestys">#</th>
							<th style="text-align:left">Osallistuja</th>
							<th style="text-align:right">Ikä</th>
							<th>Osallistuminen</th>
							<th hidden={overnightOptions.length<2}>Yöpyminen</th>
							<th hidden={!meetup.enableSaunaOption}>Saunatoive</th>
							<th style="text-align:left">Vastuuhenkilö</th>
						</tr>
					</thead>
					<tbody>
						{memberRows.map((member, memberIndex) => member.regs.map((reg, index) =>
						<ParticipantRow {...member} row={memberIndex + 1} rows={member.regs.length} index={index}
							reg={reg} regIndex={registrations.findIndex(r=> r === reg)}
							overnightOptions={overnightOptions} numDays={numDays} sauna={meetup.enableSaunaOption} />))}
					</tbody>
				</table>
			</div>
			<p style="text-align:center">
				<button type="submit">
					<Icon href="/icons/save.svg" />
					Tallenna muutokset
				</button>
			</p>
		</form>
		{isOwner && <p>Olet miitin hallinnoija. Sinulta ei voi poistaa tätä oikeutta vaikka et olisi merkattuna miitin
			järjestäjäksi.</p>}
		<style>
			.horizontally-scrollable {
				margin: 0 -1rem;
			}

			table {
				margin: auto;
			}

			th {
				font-size: 0.875rem;
				padding: 0.5rem 1rem;
			}

			table :global(td) {
				padding: 0rem 1rem 1rem;
			}

			table :global(.odd) {
				background-color: var(--bg-light-color);
			}

			table :global(.even) {
				background-color: var(--bg-light-color-alt);
			}

			table :global(:is(.odd, .even)) {
				border-inline: thin solid var(--border-color);
			}

			table :global(tr:last-child) {
				border-bottom: thin solid var(--border-color);
			}

			table :global(.odd:first-child),
			table :global(.even + .odd),
			table :global(.odd + .even) {
				border-top: thin solid var(--border-color);
			}

			table :global(.odd:first-child td),
			table :global(.even + .odd td),
			table :global(.odd + .even td) {
				padding-top: 1rem;
			}
		</style>

	</main>

	<PageFooter />
</body>

</html>) ||
(member != null &&
<NotAuthorized />) ||
<NotAuthenticated />}
